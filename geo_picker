#!/usr/bin/env perl
use Mojolicious::Lite -signatures;
use Mojo::Redis;
use Digest::MD5;
use DDP;
use Mojo::JSON qw( to_json );

our $VERSION = 0.01;

use constant {
  OSM_API => 'https://overpass-api.de/api/interpreter',
  DEBUG   => $ENV{GEOPICKER_DEBUG} || 0,
};

helper digest => sub {
  state $h = Digest::MD5->new();
};

helper db => sub {
  state $redis = Mojo::Redis->new->db;
};

#
# Get a geojson polygon and return a bound box.
#
# A bound box is a Rectangular coordinates (bottomLeft upRight)
# that surround the polygon.
#
# Input:
#   $geojson: A GeoJSON structure
#
# Returns:
#   $str: A well defined bound box format separated by comma, ex:
#   -43.48,-19.81,-42.5,-19.01
#
sub geojson_to_bbox( $geojson ) {

  my @coordinates = @{$geojson->{geometry}->{coordinates}->[0]};
  my @sorted
    = sort { $a->[0] <=> $b->[0] and $a->[1] <=> $b->[1] } @coordinates;
  my $bottom = shift @sorted;
  my $upper  = pop @sorted;

  # osm query requires [ lat, long ]
  my $str = join(',', reverse(@$bottom), reverse(@$upper));
  return $str;
}


#
# Check if we have this query cached. Returning calculated key
# and cached data
#
# Input: ($query)
#   $query: OSM overpass turbo query
#
# Returns: ($key, $data)
#   $key: the cache calculated key
#   $data: the cache data or undef
sub check_cache( $query ) {

  my $key = app->digest->add($query)->digest();
  return $key, app->db->get($key);
}

#
# Build an OSM query given a bbox
# Input: ($bbox)
#   $bbox: is an OSM format for boundbox
#
# Returns: ($query)
#   An OSM Overpass Turbo valid query
#
sub build_osm_query( $bbox ) {

  my $query = <<EOQ;
[out:json];
node
  [amenity=school]
  ($bbox);
out;
EOQ

  return $query;
}

sub query_osm ($c, $query) {
  $c->app->log->debug('Getting from OSM');

  $c->app->ua->post_p(
    OSM_API() => {Accept => 'application/json'} => form => {data => $query})
    ->then(sub ($tx) {
    my $res = $tx->result->body;
    my $key = $c->digest->add($query)->digest();
    $c->db->set($key, $res);
    p $res if DEBUG;
    $c->render(data => $res, format => 'json');
    })->catch(sub ( $err ) {
    warn "Error retrieving from OSM $err";
    p $query;
    $c->render(text => "Error: $err", code => 503);
    });
}
helper query_osm => \&query_osm;

helper settings => sub( $c ) {

  # TODO: loop through routes and set path to their route names
  return {
    path => {
      url  => $c->url_for('root')->to_abs,
      bbox => $c->url_for('bbox')->to_abs,
    },
    debug => 1,
  };
};

# route to geo/bbox
sub geo_bbox ( $c ) {
  $c->render_later;

  # TODO: subprocess the bound box
  my $geojson = $c->req->json;
  my $bbox    = geojson_to_bbox($geojson);
  my $query   = build_osm_query($bbox);

  p $query if DEBUG;

  # try from cache
  my ($key, $data) = check_cache($query);
  if ($data) {
    $c->app->log->debug('Found in Cache');
    $c->render(data => $data, format => 'json');
    return;
  }

  # not found in cache: get from osm
  $c->query_osm($query);
}
post 'geo/bbox' => \&geo_bbox => 'bbox';

get '/' => sub ( $c ) {
  $c->render(template => 'index', settings => $c->settings);
} => 'root';

app->start;

=encoding utf8

=head1 NAME

geo_picker - Backend of a Svelte app that draws a polygon and search into it.

=head1 SYNOPSIS

  ./geo_picker daemon -l http://*:3000

=head1 DESCRIPTION

This is a Mojo's backend application that searches using
L<OSM|https://wiki.openstreetmap.org/wiki/Overpass_API> for any place tagged as
school.

The client application sends (POST) a polygon using GeoJSON spec and we
construct an OSM query fitting a boundbox that contains the polygon, and send
the results back to the client. We search into the boundbox all
nodes/ways/relations tagged with "school". Also, saving the results, effectively
caching it.

=head1 HELPERS

=head2 digest

MD5 digest helper.
  $c->digest->add($content)
  $c->digest->digest() # returns hash code for $content

=head2 db

Redis database to save previous queries, saving to hit OSM again.
  my $content = $c->db->get($c->digest->digest);
  if ( $content ) { say "Content from Redis db: $content" }

=head2 query_osm ($geom)

Queries the OSM given an OSM C<$query>.  Renders the result to client or
sends an http error.

=head2 settings

Returns a hash containing settings to the front end application, such as routes
and debug settings.

=head1 AUTHOR

Marco Arthur

=head1 COPYRIGHT AND LICENSE

Same as Perl itself.

=cut

__DATA__

@@ index.html.ep
% use Mojo::JSON qw(to_json);
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width,initial-scale=1'>

    <title>Svelte app</title>
    <link rel='icon' type='image/png' href='/favicon.png'>
    <link rel='stylesheet' href='/global.css'>
    <link rel='stylesheet' href='/build/bundle.css'>

    <script>window.__app_settings = <%== to_json $settings %> </script>
    <script defer src='/build/bundle.js'></script>
  </head>

  <body>
  </body>
</html>
